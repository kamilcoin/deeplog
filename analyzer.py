from datetime import datetime
import pandas as pd

def analyze_log(df):
    report = []

    if df.empty:
        return "–õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    ip_counts = df['ip'].value_counts()
    frequent_ips = ip_counts[ip_counts > 3]
    if not frequent_ips.empty:
        report.append("\nüîÅ –ß–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å IP:")
        for ip, count in frequent_ips.items():
            report.append(f"- IP {ip}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ—á–Ω–æ–π –¥–æ—Å—Ç—É–ø (0-5 —á)
    night = df[df['datetime'].dt.hour.between(0, 5)]
    if not night.empty:
        report.append("\nüåô –î–æ—Å—Ç—É–ø –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è:")
        for _, row in night.iterrows():
            t = row['datetime'].strftime('%H:%M')
            report.append(f"- {row['ip']} –≤ {t} -> {row['url']}")

    # –û—à–∏–±–∫–∏ 4xx –∏ 5xx
    errors = df[df['status'].astype(str).str.startswith(('4', '5'))]
    if not errors.empty:
        report.append("\nüö® –û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (4xx/5xx):")
        for _, row in errors.iterrows():
            report.append(f"- {row['ip']} -> {row['url']} [{row['status']}]")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ HTTP-–º–µ—Ç–æ–¥—ã
    common_methods = {'GET', 'POST', 'HEAD'}
    uncommon = df[~df['method'].isin(common_methods)]
    if not uncommon.empty:
        report.append("\nüß™ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ HTTP-–º–µ—Ç–æ–¥—ã:")
        for _, row in uncommon.iterrows():
            report.append(f"- {row['ip']} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {row['method']} –Ω–∞ {row['url']}")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤ (401)
    brute_df = df[df['status'] == '401']
    brute_attempts = brute_df['ip'].value_counts()
    if not brute_attempts.empty:
        report.append("\nüîê –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å (401):")
        for ip, count in brute_attempts.items():
            if count >= 3:
                report.append(f"- {ip}: {count} –ø–æ–ø—ã—Ç–æ–∫")

    # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã 5xx (–≤–æ–∑–º–æ–∂–Ω—ã–π DoS)
    dos_df = df[df['status'].astype(str).str.startswith('5')]
    if not dos_df.empty and dos_df['ip'].value_counts().max() > 3:
        report.append("\nüî• –í–æ–∑–º–æ–∂–Ω–∞—è DoS-–∞—Ç–∞–∫–∞:")
        for ip, count in dos_df['ip'].value_counts().items():
            if count > 3:
                report.append(f"- {ip}: {count} –æ—à–∏–±–æ–∫ 5xx")

    if not report:
        return "‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ."

    return '\n'.join(report)